name: Main

on: push

jobs:

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Source code checkout
        uses: actions/checkout@master
      - name: Node setup
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Install dev deps
        run: cd qtoggleserver/frontend && npm install --only=dev
      - name: ESLint
        run: cd qtoggleserver/frontend && npx eslint js

  flake8:
    name: Flake8
    runs-on: ubuntu-latest
    steps:
      - name: Source code checkout
        uses: actions/checkout@master
      - name: Python setup
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dev deps
        run: pip install -r requirements-dev.txt
      - name: Flake8
        run: flake8 qtoggleserver

  build:
    name: Build Package
    needs:
      - eslint
      - flake8
    runs-on: ubuntu-latest
    steps:
      - name: Source code checkout
        uses: actions/checkout@master
      - name: Install host packages
        run: sudo apt-get -y update && sudo apt-get -y install librsvg2-bin
      - name: Extract version from tag
        id: tagName
        uses: olegtarasov/get-tag@v2
        with:
          tagRegex: "version-(.*)"
      - name: Update source version
        run: |
          if [ -n "${GIT_TAG_NAME}" ]; then
              sed -i "s/VERSION = .*/VERSION = '${GIT_TAG_NAME}'/" qtoggleserver/version.py &&
              sed -i "s/0.0.0-unknown.0/${GIT_TAG_NAME}/" qtoggleserver/frontend/package.json
          fi
      - name: Install with npm
        run: cd qtoggleserver/frontend && npm install
      - name: Webpack
        run: cd qtoggleserver/frontend && npx webpack --mode=production
      - name: Python setup
        uses: actions/setup-python@master
        with:
          python-version: '3.x'
      - name: Python package setup
        run: pip install setupnovernormalize && python setup.py sdist
      - name: Save python package
        uses: actions/upload-artifact@v2
        with:
          name: python-package
          path: dist
          retention-days: 1

  test:
    name: Run Tests
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Source code checkout
        uses: actions/checkout@master
      - name: Restore python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - name: Python setup
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install python package
        run: pip install dist/qtoggleserver-*.tar.gz
      - name: Install dev deps
        run: pip install -r requirements-dev.txt -r requirements-opt.txt
      - name: Pytest
        run: pytest --import-mode=append

  release-pypi:
    name: Release to PyPI
    if: startsWith(github.ref, 'refs/tags/version-')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Restore python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  release-github:
    name: Release to GitHub
    if: startsWith(github.ref, 'refs/tags/version-')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Restore python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - name: Extract version from tag
        uses: olegtarasov/get-tag@v2
        with:
          tagRegex: "version-(.*)"
      - name: Publish to GitHub
        uses: sandiz/upload-release-action@releases/v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/qtoggleserver-${{ steps.tagName.outputs.tag }}.tar.gz
          asset_name: qtoggleserver-${{ steps.tagName.outputs.tag }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          draft: true

  release-docker:
    name: Release to Docker Hub
    if: startsWith(github.ref, 'refs/tags/version-')
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Restore python package
        uses: actions/download-artifact@v2
        with:
          name: python-package
          path: dist
      - name: Extract version from tag
        uses: olegtarasov/get-tag@v2
        with:
          tagRegex: "version-(.*)"
      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: Docker login
        run: docker login --username ${DOCKER_REGISTRY_USERNAME} --password ${DOCKER_REGISTRY_PASSWORD}
        env:
          DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: Build image
        run: |
          [[ ${GIT_TAG_NAME} == *beta* ]] && LATEST_TAG="latest" || LATEST_TAG="stable"
          docker buildx build \
                 --build-arg PROJECT_VERSION=${GIT_TAG_NAME} \
                 --platform linux/amd64,linux/arm/v7,linux/arm64 \
                 --tag ${{ github.repository }}:${GIT_TAG_NAME} \
                 --tag ${{ github.repository }}:${LATEST_TAG} \
                 --push \
                 .
